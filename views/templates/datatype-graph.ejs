<h2>DataType Graph</h2>
<style>
.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
}

ellipse {
  fill:#ccc;
  stroke:#666;
  stroke-width: 1.5px;
}

text {
  font: 10px sans-serif;
  pointer-events: none;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
}
</style>
<script>
/*$("#graph").click(function(){

        var idDatatype = document.getElementById('select1').value;
        var router = xtens.router; 

        $.post( '/graph',
            {idDataType: idDatatype},
            function (err,res,body) {
            var graph = body.responseJSON;

var links = graph.links;
var nodes = {};
var force;
var width = 960,
    height = 500;

var position = width/2;
var depth1;

links.forEach(function(link) {
      
    link.source = nodes[link.source] || (nodes[link.source] = {name: link.source,template:link.source_template,x:width/2,y:40,fixed:true});
    
    if(depth1 === link.depth){
        position = position+160;
    }
    else{
    position = link.source.x;
    }

    link.target = nodes[link.target] || (nodes[link.target] = {name: link.target,template:link.target_template,x:position, y:link.depth*100,fixed:true});
  
    depth1 = link.depth;
 
});


 force = d3.layout.force()
    .nodes(d3.values(nodes).filter(function(d){ return d.name;}))
    .links(links)
    .size([width, height])
    .linkDistance(120)
    .charge(-300)
    .on("tick", tick)
    .start();

var svg = d3.select("#main").append("svg")
    .attr("width", width)
    .attr("height", height);

svg.append("defs").selectAll("marker")
    .data(["suit"])
  .enter().append("marker")
  .attr("id", function(d) { return d; })
  .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 6)
    .attr("markerHeight",6)
    .attr("orient", "auto")
   .append("path")
    .attr("d", "M0,-5L10,0L0,5");

var path = svg.append("g").selectAll("path")
    .data(force.links())
    .enter().append("path")
    .attr("class","link")
    .attr("marker-end","url(#suit)");
    
var ellipse = svg.append("g").selectAll("ellipse")
    .data(force.nodes())
    .enter().append("ellipse")
    .attr("rx", 70)
    .attr("ry",20)
    .call(force.drag);

var text1 = svg.append("g").selectAll("text")
    .data(force.nodes())
    .enter().append("text")
    .attr("x", -30)
    .attr("y", -5)
    .text(function(d) { return d.name;});

  var text2 =svg.append("g").selectAll("text").data(force.nodes()).enter().append("text")
    .attr("x",-30)
    .attr("y",10)
    .text(function(d){return d.template;});


   function tick() {
  path.attr("d", linkArc);
  ellipse.attr("transform",transform)
  text1.attr("transform", transform);
  text2.attr("transform",transform);
}
 
function linkArc(d) {
    if(d.target.x && d.target.y){
  var dx = d.target.x - d.source.x,
      dy = d.target.y - d.source.y,
      dr = Math.sqrt(dx * dx + dy * dy);
  return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
    }
    else {
    return null;
    }
}

function transform(d) {
  return "translate(" + d.x + "," + d.y + ")";
}

           /* var width = 960,
            height = 500,
            scale_factor=30;
            var color = d3.scale.category20();

            var force = d3.layout.force()
            .linkDistance(30)
            .size([width, height]);

            var svg = d3.select("#main").append("svg")
            .attr("width", width)
            .attr("height", height);

            force
            .nodes(graph.nodes)
            .links(graph.links);

            var sources = [];

            for(var h=0;h<graph.links.length;h++)
            {
                sources.push(graph.links[h].source);
            }

            var targets = [];

            for(var h=0;h<graph.links.length;h++)
            {
                targets.push(graph.links[h].target);
            }
            depth_target = {};

            for(var h=0;h<graph.links.length;h++){

                depth_target[graph.links[h].target] = graph.links[h].depth;

            }

            var link = svg.selectAll(".link")
                .data(graph.links)
                .enter().append("line")
                .attr("class", "link");

            var node = svg.selectAll(".node")
                .data(graph.nodes)
                .enter().append("g")
                .attr("class", "node")
                .call(force.drag);


        var circle = svg.append("g").selectAll("circle")
    .data(graph.nodes)
  .enter().append("circle")
    .attr("r", 6)
    .attr("cx", function(d) { return (d.id)*(scale_factor+10); })
                .attr("cy", function(d) { 

                        if(targets.indexOf(d.id)===-1){
                        return d.id*scale_factor;
                        }
                        else {
                        return (depth_target[d.id]+10)*scale_factor; 
                        }
                        })
            .style("fill", function(d) { return color(d.id); })

    .call(force.drag);

var text = svg.append("g").selectAll("text")
    .data(graph.nodes)
  .enter().append("text")
  .attr("x", function(d) { return ((d.id)*(scale_factor+10))+8;})
          .attr("y", function(d){
              if(targets.indexOf(d.id)===-1){
                        return (d.id*scale_factor);
                        }
                        else {
                        return (depth_target[d.id]+10)*scale_factor; 
                        } })
    .text(function(d) { return d.name; });

            
            link.attr("x1", function(d) { return (d.source)*(scale_factor+10); })
                .attr("y1", function(d) {
                        if(targets.indexOf(d.source)===-1){
                        return d.source*scale_factor;}
                        else {
                        return (depth_target[d.source]+10)*scale_factor;
                        }
                        })
            .attr("x2", function(d) { return (d.target)*(scale_factor+10); })
                .attr("y2", function(d) { return (d.depth+10)*scale_factor; });

*/


         /*   }
        ).fail(function(res){
            alert("Error: " + res.responseJSON.error);
            });
});*/
</script>
<div id="content">
    <p>Select a DataType:</p>
    <div> 
        <p><select id="select1">
            <% _.each(dataTypes,function(dataType){ %>
            <option id = "dataType"><%= dataType.get("name")%></option>
            <%})%>
        </select></p>
    </div>
    <div>
        <a id="graph" class="btn btn-primary">Create the DataType Graph</a>
    </div>
</div>


