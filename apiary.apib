FORMAT: 1A

# XTENS 2

A digital repository for heterogeneous data in life science.

## Auth [/login]

### Login [POST]

You have to authenticate to login on the platform: this method takes a JSON object containing identifier (username or email) and password.

+ Request (application/json)

    + Body 
            
            {
                "identifier":"username", 
                "password":"password"
            }


+ Response 200 (application/json)

    
            {
                "user": {
                    "email": "johndejohn@domain.com",
                    "firstName": "John",
                    "lastName": "De John",
                    "birthDate": "1970-01-01T00:00:00.000Z",
                    "login": "user",
                    "passports": 1,
                    "sex": "M",
                    "groups": 1,
                    "id": 7,
                    "createdAt": "2015-06-18T10:13:11.000Z",
                    "updatedAt": "2015-06-18T10:13:11.000Z"
                },
                "token": "LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3"
            }

            
## Operator [/operator]

### Patch Password [PATCH]

You may change your password: this method takes a JSON object containing three attributes:
old password, new password and the confirmation of new password.

+ Request (application/json)

    + Headers        
            
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
    + Body 
            
            {
                "oldPass": "oldPassword",
                "newPass": "newPassword",
                "cnewPass": "newPassword"
            }
            

+ Response 204

            

## DataType Collection [/dataType]

### List All DataType [GET]

You may retrieve all existing datatypes

+ Request (application/json)

    + Headers        
            
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache


+ Response 200 (application/json)

    + Headers
    
            Link: <http://host:1337/datatype?limit=10&skip=10>; rel=next, <http://host:1337/datatype?limit=10&skip=240>; rel=last
            X-Current-Page: 0
            X-Page-Size: 10
            X-Total-Count: 250
            X-Total-Pages: 25
            
    + Body
    
            [
                {
                    "parents": [],
                    "name": "Dataype A",
                    "schema": {
                        "body": [
                            {
                                "name": "Dataype A metadata",
                                "label": "METADATA GROUP",
                                "content": [
                                    {
                                        "name": "Platform",
                                        "label": "METADATA FIELD",
                                        "isList": true,
                                        "hasUnit": false,
                                        "visible": true,
                                        "hasRange": false,
                                        "required": true,
                                        "fieldType": "Text",
                                        "sensitive": false,
                                        "customValue": null,
                                        "ontologyUri": null,
                                        "formattedName": "platform",
                                        "possibleUnits": null,
                                        "possibleValues": [
                                            "Agilent"
                                        ]
                                    },
                                    {
                                        "name": "Array",
                                        "label": "METADATA FIELD",
                                        "isList": true,
                                        "hasUnit": false,
                                        "visible": true,
                                        "hasRange": false,
                                        "required": false,
                                        "fieldType": "Text",
                                        "sensitive": false,
                                        "customValue": null,
                                        "ontologyUri": null,
                                        "formattedName": "array",
                                        "possibleUnits": null,
                                        "possibleValues": [
                                            "4x44K",
                                            "4x180K",
                                            "44K"
                                        ]
                                    }
                                ]
                            }
                        ],
                        "header": {
                            "name": "Dataype A",
                            "model": "Data",
                            "version": "0.1",
                            "ontology": "",
                            "fileUpload": true,
                            "description": "a test Dataype A"
                        }
                    },
                    "model": "Data",
                    "id": 1,
                    "createdAt": "2015-07-24T12:41:41.913Z",
                    "updatedAt": "2015-09-29T10:37:23.176Z"
                },
                {
                    "parents": [1],
                    "name": "Dataype B",
                    "schema": {
                        "body": [
                            {
                                "name": "Dataype B metadata",
                                "label": "METADATA GROUP",
                                "content": [
                                    {
                                        "name": "Platform",
                                        "label": "METADATA FIELD",
                                        "isList": true,
                                        "hasUnit": false,
                                        "visible": true,
                                        "hasRange": false,
                                        "required": true,
                                        "fieldType": "Text",
                                        "sensitive": false,
                                        "customValue": null,
                                        "ontologyUri": null,
                                        "formattedName": "platform",
                                        "possibleUnits": null,
                                        "possibleValues": [
                                            "Agilent"
                                        ]
                                    },
                                    {
                                        "name": "Array",
                                        "label": "METADATA FIELD",
                                        "isList": true,
                                        "hasUnit": false,
                                        "visible": true,
                                        "hasRange": false,
                                        "required": false,
                                        "fieldType": "Text",
                                        "sensitive": false,
                                        "customValue": null,
                                        "ontologyUri": null,
                                        "formattedName": "array",
                                        "possibleUnits": null,
                                        "possibleValues": [
                                            "4x44K",
                                            "4x180K",
                                            "44K"
                                        ]
                                    }
                                ]
                            }
                        ],
                        "header": {
                            "name": "Dataype B",
                            "model": "Data",
                            "version": "0.1",
                            "ontology": "",
                            "fileUpload": true,
                            "description": "a test Dataype B"
                        }
                    },
                    "model": "Data",
                    "id": 2,
                    "createdAt": "2015-07-24T12:41:41.913Z",
                    "updatedAt": "2015-09-29T10:37:23.176Z"
                }
            ]

### Create a New DataType [POST]

You may create a new datatype instance using this method. It takes a JSON
object containing name (DataType name), model (DataType Model: Data, Sample or Subject) 
and schema object containing body and headers object. Body can be an empty object and must
contain metadata properties and structure. Header must contain general property of datatype

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
    + Body  
            
            {
              "name": "Datatype A",
              "schema": {
                "body": [
                  {
                    "name": "Metadata Group Name",
                    "label": "METADATA GROUP",
                    "content": [
                      {
                        "name": "Metadata Field Name A",
                        "label": "METADATA FIELD",
                        "_group": "Metadata Group Name",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": true,
                        "fieldType": "integer",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_a",
                        "possibleUnits": null,
                        "caseInsensitive": false
                      },
                      {
                        "name": "Metadata Field Name A",
                        "label": "METADATA FIELD",
                        "_group": "Details Genomic Profile",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": false,
                        "fieldType": "Text",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_b",
                        "possibleUnits": null,
                        "possibleValues": [
                          "alpha",
                          "beta",
                          "gamma"
                        ],
                        "caseInsensitive": false
                      }
                    ]
                  }
                ],
                "header": {
                  "name": "Genomic Profile",
                  "model": "Data",
                  "version": "0.0.1",
                  "ontology": "",
                  "fileUpload": false,
                  "description": "Datatype example"
                }
              },
              "model": "Data"
            }
            
+ Response 201 (application/json)

            {
              "name": "Datatype A",
              "schema": {
                "body": [
                  {
                    "name": "Metadata Group Name",
                    "label": "METADATA GROUP",
                    "content": [
                      {
                        "name": "Metadata Field Name A",
                        "label": "METADATA FIELD",
                        "_group": "Metadata Group Name",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": true,
                        "fieldType": "integer",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_a",
                        "possibleUnits": null,
                        "caseInsensitive": false
                      },
                      {
                        "name": "Metadata Field Name B",
                        "label": "METADATA FIELD",
                        "_group": "Details Genomic Profile",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": false,
                        "fieldType": "Text",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_b",
                        "possibleUnits": null,
                        "possibleValues": [
                          "alpha",
                          "beta",
                          "gamma"
                        ],
                        "caseInsensitive": false
                      }
                    ]
                  }
                ],
                "header": {
                  "name": "Genomic Profile",
                  "model": "Data",
                  "version": "0.0.1",
                  "ontology": "",
                  "fileUpload": false,
                  "description": "Datatype example"
                }
              },
              "model": "Data",
              "id": 1,
              "createdAt": "2016-05-16T11:02:13.244Z",
              "updatedAt": "2016-05-16T11:02:13.244Z"
            }

## DataType [/dataType/{id}]

    
### Retrieve an Existing DataType instance [GET]

You may retrieve a single existing datatype instance by its id

+ Parameters
    + id (required, number, `1`) ... DataType ID (`id`)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
            
    
+ Response 200 (application/json)
        

               {
              "name": "Datatype A",
              "schema": {
                "body": [
                  {
                    "name": "Metadata Group Name",
                    "label": "METADATA GROUP",
                    "content": [
                      {
                        "name": "Metadata Field Name A",
                        "label": "METADATA FIELD",
                        "_group": "Metadata Group Name",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": true,
                        "fieldType": "integer",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_a",
                        "possibleUnits": null,
                        "caseInsensitive": false
                      },
                      {
                        "name": "Metadata Field Name B",
                        "label": "METADATA FIELD",
                        "_group": "Details Genomic Profile",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": false,
                        "fieldType": "Text",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_b",
                        "possibleUnits": null,
                        "possibleValues": [
                          "alpha",
                          "beta",
                          "gamma"
                        ],
                        "caseInsensitive": false
                      }
                    ]
                  }
                ],
                "header": {
                  "name": "Genomic Profile",
                  "model": "Data",
                  "version": "0.0.1",
                  "ontology": "",
                  "fileUpload": false,
                  "description": "Datatype example"
                }
              },
              "model": "Data",
              "id": 1,
              "createdAt": "2016-05-16T11:02:13.244Z",
              "updatedAt": "2016-09-05T09:51:02.606Z"
              }
                
### Update an Existing DataType instance [PUT]

You may update an existing datatype using this method. It takes a JSON
object containing an id (Datatype unique identifier, primary key), 
model (DataType Model: Data, Sample, Subject),
metadata schema (body and header: body must contain metadata properties and structure,
header must contain general properties of datatype)

+ Parameters
    + id (required, number, `1`) ... DataType ID (`id`)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
    + Body
        
            {
              "name": "Datatype A",
              "schema": {
                "body": [
                  {
                    "name": "Metadata Group Name",
                    "label": "METADATA GROUP",
                    "content": [
                      {
                        "name": "Metadata Field Name A",
                        "label": "METADATA FIELD",
                        "_group": "Metadata Group Name",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": true,
                        "fieldType": "integer",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_a",
                        "possibleUnits": null,
                        "caseInsensitive": false
                      },
                      {
                        "name": "Metadata Field Name B",
                        "label": "METADATA FIELD",
                        "_group": "Details Genomic Profile",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": false,
                        "fieldType": "Text",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_b",
                        "possibleUnits": null,
                        "possibleValues": [
                          "alpha",
                          "beta",
                          "gamma"
                        ],
                        "caseInsensitive": false
                      },
                      {
                        "name": "Metadata Field Name C",
                        "label": "METADATA FIELD",
                        "_group": "Details Genomic Profile",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": false,
                        "fieldType": "Double",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_c",
                        "possibleUnits": null,
                        "possibleValues": [
                          "alpha",
                          "beta",
                          "gamma"
                        ],
                        "caseInsensitive": false
                      }
                    ]
                  }
                ],
                "header": {
                  "name": "Genomic Profile",
                  "model": "Data",
                  "version": "0.0.1",
                  "ontology": "",
                  "fileUpload": false,
                  "description": "Datatype example"
                }
              },
              "model": "Data",
              "id": 1,
              "createdAt": "2016-05-16T11:02:13.244Z",
              "updatedAt": "2016-05-16T11:02:13.244Z"
            }

+ Response 200 (application/json)
        

        {
              "name": "Datatype A",
              "schema": {
                "body": [
                  {
                    "name": "Metadata Group Name",
                    "label": "METADATA GROUP",
                    "content": [
                      {
                        "name": "Metadata Field Name A",
                        "label": "METADATA FIELD",
                        "_group": "Metadata Group Name",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": true,
                        "fieldType": "integer",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_a",
                        "possibleUnits": null,
                        "caseInsensitive": false
                      },
                      {
                        "name": "Metadata Field Name B",
                        "label": "METADATA FIELD",
                        "_group": "Details Genomic Profile",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": false,
                        "fieldType": "Text",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_b",
                        "possibleUnits": null,
                        "possibleValues": [
                          "alpha",
                          "beta",
                          "gamma"
                        ],
                        "caseInsensitive": false
                      },
                      {
                        "name": "Metadata Field Name C",
                        "label": "METADATA FIELD",
                        "_group": "Details Genomic Profile",
                        "isList": true,
                        "hasUnit": false,
                        "visible": true,
                        "hasRange": false,
                        "required": false,
                        "fieldType": "Double",
                        "sensitive": false,
                        "customValue": null,
                        "ontologyUri": null,
                        "formattedName": "metadata_field_name_c",
                        "possibleUnits": null,
                        "caseInsensitive": false
                      }
                    ]
                  }
                ],
                "header": {
                  "name": "Genomic Profile",
                  "model": "Data",
                  "version": "0.0.1",
                  "ontology": "",
                  "fileUpload": false,
                  "description": "Datatype example"
                }
              },
              "model": "Data",
              "id": 1,
              "createdAt": "2016-05-16T11:02:13.244Z",
              "updatedAt": "2016-09-09:14:13.456Z"
            }

### Delete an Existing DataType instance [DELETE]
 You may delete an existing datatype using this method. You must provide an existing ID

+ Parameters
    + id (required, number, `2`) ... DataType ID (`id`)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache

+ Response 200 (application/json)

        {
            "deleted": 1
        }
        
## Subject Collection [/subject]

### List All Subjects [GET]

You may retrieve all existing subjects

+ Request (application/json)

    + Headers        
            
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache


+ Response 200 (application/json)

    + Headers
    
            Link: <http://host:1337/subject?limit=30&skip=30>; rel=next, <http://host:1337/subject?limit=30&skip=1440>; rel=last
            X-Current-Page: 0
            X-Page-Size: 30
            X-Total-Count: 1452
            X-Total-Pages: 49
            
    + Body
    
            [
                {
                    "personalInfo": {
                        "surname": "ROSSI",
                        "id": 1,
                        "givenName": "MARIO",
                        "birthDate": "2016-07-19T00:00:00.000Z",
                        "createdAt": "2016-08-09T11:59:20.980Z",
                        "updatedAt": "2016-08-09T11:59:20.980Z"
                    },
                    "type": 1,
                    "code": "CPN-1",
                    "sex": "M",
                    "tags": null,
                    "notes": null,
                    "metadata": {},
                    "id": 1,
                    "createdAt": "2016-08-09T11:59:20.984Z",
                    "updatedAt": "2016-08-09T11:59:20.984Z"
                }
            ]
    
### Create a New Subject [POST]

You may create a new subject using this method. It takes a JSON
object containing a type (DataType ID), sex (allowed values are: M, F, N.D.),
code (a unique subject code), personalInfo (optional, it can be null or empty object),
and metadata (can be an empty object, must contain only metadata fields allowed
for the DataType specified in "type")

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
    + Body
            
            {
                "type":1,
                "sex": "M",
                "code": "PAT-0001",
                "personalInfo": {
                    "givenName": "Mario",
                    "surname": "Verdi",
                    "birthDate": "1987-04-23"
                },
                "metadata": {}
            }

+ Response 201 (application/json)

    + Headers
    
            Location: /subject/7
    
    + Body
    
            {
                "projects": [],
                "samples": [],
                "childrenData": [],
                "personalInfo": {
                    "surname": "Verdi",
                    "id": 5,
                    "givenName": "Mario",
                    "birthDate": "1987-04-23T00:00:00.000Z",
                    "createdAt": "2015-11-19T16:45:49.395Z",
                    "updatedAt": "2015-11-19T16:45:49.395Z"
                },
                "type": 1,
                "code": "PAT-0001",
                "sex": "M",
                "tags": null,
                "notes": null,
                "metadata": {},
                "id": 7,
                "createdAt": "2015-11-19T16:45:49.482Z",
                "updatedAt": "2015-11-19T16:45:49.482Z"
            }


## Subject [/subject/{id}]

### Retrieve an Existing Subject [GET]

You may retrieve a single existing subject by its id

+ Parameters
    + id (required, number, `7`) ... Subject ID (`id`)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
+ Response 200 (application/json)

            {
                "projects": [],
                "samples": [],
                "childrenData": [],
                "personalInfo": {
                    "surname": "Verdi",
                    "id": 5,
                    "givenName": "Maria",
                    "birthDate": "1987-04-22T22:00:00.000Z",
                    "createdAt": "2015-11-19T16:45:49.395Z",
                    "updatedAt": "2015-11-19T16:45:49.395Z"
                },
                "type": 1,
                "code": "PAT-0001",
                "sex": "M",
                "tags": null,
                "notes": null,
                "metadata": {},
                "id": 7,
                "createdAt": "2015-11-19T16:45:49.482Z",
                "updatedAt": "2015-11-19T17:20:34.362Z"
            }
            
### Update an Existing Subject [PUT]

You may update an existing subject using this method. It takes a JSON
object containing an id (Subject unique identifier, primary key), type (DataType ID), sex (allowed values are: M, F, N.D.),
code (a unique subject code), personalInfo (optional, it can be null or empty object),
and metadata (can be an empty object, must contain only metadata fields allowed
for the DataType specified in "type")

+ Parameters
    + id (required, number, `7`) ... Subject ID (`id`)
    
+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
    + Body  
    
            {   
                "id": 7,
                "type":1,
                "sex": "F",
                "code": "PAT-0001",
                "personalInfo": {
                    "id": 5,
                    "givenName": "Maria",
                    "surname": "Verdi",
                    "birthDate": "1987-04-23"
                },
                "metadata": {}
            }

+ Response 200 (application/json)

            {
                "projects": [],
                "samples": [],
                "childrenData": [],
                "personalInfo": {
                    "surname": "Verdi",
                    "id": 5,
                    "givenName": "Maria",
                    "birthDate": "1987-04-23T00:00:00.000Z",
                    "createdAt": "2015-11-19T16:45:49.395Z",
                    "updatedAt": "2015-11-19T16:45:49.395Z"
                },
                "type": 1,
                "code": "PAT-0001",
                "sex": "M",
                "tags": null,
                "notes": null,
                "metadata": {},
                "id": 7,
                "createdAt": "2015-11-19T16:45:49.482Z",
                "updatedAt": "2015-11-19T17:20:34.362Z"
            }

### Delete an Existing Subject [DELETE]
You may delete an existing subject using this method. You must provide an
existing ID

+ Parameters
    + id (required, number, `7`) ... Subject ID (`id`)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache

+ Response 200 (application/json)

        {
            "deleted": 1
        }
            
            
## Data Collection [/data]

### List All Data [GET]

You may retrieve all existing data

+ Request (application/json)

    + Headers        
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache


+ Response 200 (application/json)

    + Headers
    
            Link: <http://localhost:1337/data?limit=10&skip=10>; rel=next, <http://localhost:1337/data?limit=10&skip=113>; rel=last
            X-Current-Page: 0
            X-Page-Size: 10
            X-Total-Count: 123
            X-Total-Pages: 13
            
    + Body
            
            [
                {
                    "type": 11,
                    "parentSubject": 1,
                    "parentSample": 21,
                    "parentData": null,
                    "tags": null,
                    "notes": null,
                    "metadata": {
                      "platform": {
                        "value": "PLUS2"
                      }
                    },
                    "id": 234,
                    "date": null,
                    "createdAt": "2015-12-28T11:37:59.245Z",
                    "updatedAt": "2015-12-28T11:37:59.245Z"
                },
                {
                    "type": 11,
                    "parentSubject": 21,
                    "parentSample": 12,
                    "parentData": null,
                    "tags": null,
                    "notes": null,
                    "metadata": {
                      "platform": {
                        "value": "PLUS2"
                      }
                    },
                    "id": 12,
                    "date": null,
                    "createdAt": "2015-12-28T11:37:59.245Z",
                    "updatedAt": "2015-12-28T11:37:59.245Z"
                },
                {
                    "type": 2,
                    "parentSubject": 213,
                    "parentSample": 24,
                    "parentData": null,
                    "tags": null,
                    "notes": null,
                    "metadata": {
                      "platform": {
                        "value": "PLUS2"
                      }
                    },
                    "id": 123,
                    "date": null,
                    "createdAt": "2015-12-28T11:37:59.245Z",
                    "updatedAt": "2015-12-28T11:37:59.245Z"
                }
            ]

### Create a New Data [POST]

You may create a new data instance using this method. It takes a JSON
object containing a type (DataType ID), and metadata (can be an empty object, must 
contain only metadata fields allowed for the DataType specified in "type")

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
    + Body  
            
            {
                "type":4,
                "date": "2015-11-16",
                "tags": ["optional tags", "can be null"],
                "notes": "optional textual notes (can be null)",
                "parentSubject": 1,
                "parentData": 39,
                "metadata": {
                    "user_id": {
                        "value": 2
                    },
                    "element_id": {
                        "value": 5
                    },
                    "element_name": {
                        "value": "Phalanx IV"
                    },
                    "deviation": {
                        "value": 12.3
                    },
                    "__DATA": {
                        "bulky data": "here you can put any bulky data you want to store within the database"
                    }
                },
                "files": [
                    {
                        "uri": "/home/user/file1.txt"
                    },
                    {
                        "uri": "/home/user/file2.dat"
                    }
                ]
            }
            


+ Response 201 (application/json)

    + Headers
            
            Location: /data/59
            Content-Length: 1030
            Vary: X-HTTP-Method-Override
            X-Powered-By: Sails <sailsjs.org>

    + Body
    
            {
                "files": [
                    {
                        "uri": "/home/user/file1.txt",
                        "details": null,
                        "id": 24,
                        "createdAt": "2015-11-30T22:46:55.487Z",
                        "updatedAt": "2015-11-30T22:46:55.487Z"
                    },
                    {
                        "uri": "/home/user/file2.dat",
                        "details": null,
                        "id": 25,
                        "createdAt": "2015-11-30T22:46:55.487Z",
                        "updatedAt": "2015-11-30T22:46:55.487Z"
                    }
                ],
                "type": 4,
                "parentSubject": 1,
                "parentSample": null,
                "parentData": 39,
                "tags": [
                    "optional tags",
                    "can be null"
                ],
                "notes": "optional textual notes (can be null)",
                "metadata": {
                    "__DATA": {
                        "bulky data": "here you can put any bulky data you want to store within the database"
                    },
                    "user_id": {
                        "value": 2
                    },
                    "deviation": {
                        "value": 12.3
                    },
                    "element_id": {
                        "value": 5
                    },
                    "element_name": {
                        "value": "Phalanx IV"
                    }
                },
                "id": 59,
                "date": "2015-11-16T00:00:00.000Z",
                "createdAt": "2015-11-30T22:46:55.483Z",
                "updatedAt": "2015-11-30T22:46:55.483Z"
            }


## Data [/data/{id}]

### Retrieve an Existing Data instance [GET]
You may retrieve a single existing data instance by its id

+ Parameters
    + id (required, number, `59`) ... Data ID (`id`)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
+ Response 200 (application/json)
        

    + Headers
            
            Content-Length: 647
            ETag: W/"287-1067778878"
        
    + Body
    
               {
                    "type": 4,
                    "parentSubject": 1,
                    "parentSample": null,
                    "parentData": 39,
                    "tags": [
                        "optional tags",
                        "can be null"
                    ],
                    "notes": "optional textual notes (can be null)",
                    "metadata": {
                        "__DATA": {
                            "bulky data": "here you can put any bulky data you want to store within the database"
                        },
                        "user_id": {
                            "value": 2
                        },
                        "deviation": {
                            "value": 12.3
                        },
                        "element_id": {
                            "value": 5
                        },
                        "element_name": {
                            "value": "Phalanx IV"
                        }
                    },
                    "id": 59,
                    "date": "2015-11-16T00:00:00.000Z",
                    "createdAt": "2015-11-30T22:46:55.483Z",
                    "updatedAt": "2015-11-30T22:46:55.483Z"
                }
                
### Update an Existing Data instance [PUT]

You may update an existing data using this method. It takes a JSON
object containing an id (Data unique identifier, primary key), type (DataType ID),
and metadata (can be an empty object, must contain only metadata fields allowed
for the DataType specified in type)

+ Parameters
    + id (required, number, `59`) ... Data ID (`id`)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
    + Body
            
            {
                "type": 4,
                "parentSubject": 1,
                "parentData": 39,
                "tags": [
                    "optional tags",
                    "can be null",
                    "new tag",
                    "yet another new tag"
                ],
                "notes": "optional textual notes (can be null)",
                "metadata": {
                    "__DATA": "bulky data updated to some random string",
                    "user_id": {
                        "value": 2
                    },
                    "deviation": {
                        "value": 12.3
                    },
                    "element_id": {
                        "value": 5
                    },
                    "element_name": {
                        "value": "Phalanx IV"
                    }
                },
                "files": [
                    {
                        "uri": "/home/user/file1.txt",
                        "details": null,
                        "id": 24,
                        "createdAt": "2015-11-30T22:46:55.487Z",
                        "updatedAt": "2015-11-30T22:46:55.487Z"
                    },
                    {
                        "uri": "/home/user/file2.dat",
                        "details": null,
                        "id": 25,
                        "createdAt": "2015-11-30T22:46:55.487Z",
                        "updatedAt": "2015-11-30T22:46:55.487Z"
                    },
                    {
                        "uri": "/home/user/newFileToAdd.json"
                    }
                ],
                "id": 59,
                "date": "2015-11-16T00:00:00.000Z",
                "createdAt": "2015-11-30T22:46:55.483Z",
                "updatedAt": "2015-11-30T22:46:55.483Z"
            }

+ Response 200 (application/json)
        

        {
            "files": [
                {
                    "uri": "/home/user/file1.txt",
                    "details": null,
                    "id": 24,
                    "createdAt": "2015-11-30T22:46:55.487Z",
                    "updatedAt": "2015-11-30T22:46:55.487Z"
                },
                {
                    "uri": "/home/user/file2.dat",
                    "details": null,
                    "id": 25,
                    "createdAt": "2015-11-30T22:46:55.487Z",
                    "updatedAt": "2015-11-30T22:46:55.487Z"
                },
                {
                    "uri": "/home/user/newFileToAdd.json",
                    "details": null,
                    "id": 26,
                    "createdAt": "2015-11-30T23:07:22.906Z",
                    "updatedAt": "2015-11-30T23:07:22.906Z"
                }
            ],
            "type": 4,
            "parentSubject": 1,
            "parentSample": null,
            "parentData": 39,
            "tags": [
                "optional tags",
                "can be null",
                "new tag",
                "yet another new tag"
            ],
            "notes": "optional textual notes (can be null)",
            "metadata": {
                "__DATA": "bulky data updated to some random string",
                "user_id": {
                    "value": 2
                },
                "deviation": {
                    "value": 12.3
                },
                "element_id": {
                    "value": 5
                },
                "element_name": {
                    "value": "Phalanx IV"
                }
            },
            "id": 59,
            "date": "2015-11-15T23:00:00.000Z",
            "createdAt": "2015-11-30T22:46:55.483Z",
            "updatedAt": "2015-11-30T23:07:22.768Z"
        }

### Delete an Existing Data instance [DELETE]
 You may delete an existing data using this method. You must provide an existing ID

+ Parameters
    + id (required, number, `59`) ... Data ID (`id`)
    
+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache

+ Response 200 (application/json)

            {
                "deleted": 1
            }

## Sample Collection [/sample]

### List All Sample [GET]

You may retrieve all existing samples

+ Request (application/json)

    + Headers        
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache


+ Response 200 (application/json)

    + Headers
            
            Link: <http://localhost:1337/sample?limit=30&skip=30>; rel=next, <http://localhost:1337/sample?limit=30&skip=5940>; rel=last
            X-Current-Page: 0
            X-Page-Size: 30
            X-Total-Count: 5966
            X-Total-Pages: 199
    
    + Body
            
            [  
               {  
                  "id":32,
                  "type":3,
                  "biobank":1,
                  "donor":32,
                  "parentSample":12,
                  "metadata":{  
                     "city":{  
                        "group":"Provenance Info",
                        "value":"MILANO"
                     },
                     "__DATA":{  
                        "bulky data":"here you can put any bulky data you want to store within the database"
                     },
                     "files":[  
            
                     ],
                     "tags":null,
                     "notes":null,
                     "biobankCode":"46546643",
                     "date":"2015-11-16",
                     "createdAt":"2016-08-09T12:05:49.166Z",
                     "updatedAt":"2016-08-09T12:05:49.166Z"
                  }
               },
               {  
                  "id":2,
                  "type":3,
                  "biobank":1,
                  "donor":57,
                  "parentSample":54,
                  "metadata":{  
                     "city":{  
                        "group":"Provenance Info",
                        "value":"MILANO"
                     },
                     "__DATA":{  
                        "bulky data":"here you can put any bulky data you want to store within the database"
                     },
                     "files":[  
            
                     ],
                     "tags":null,
                     "notes":null,
                     "biobankCode":"46546643",
                     "date":"2015-11-16",
                     "createdAt":"2016-08-09T12:05:49.166Z",
                     "updatedAt":"2016-08-09T12:05:49.166Z"
                  }
               },
               {  
                  "id":1,
                  "type":3,
                  "biobank":1,
                  "donor":2,
                  "parentSample":3,
                  "metadata":{  
                     "city":{  
                        "group":"Provenance Info",
                        "value":"MILANO"
                     },
                     "__DATA":{  
                        "bulky data":"here you can put any bulky data you want to store within the database"
                     },
                     "files":[  
            
                     ],
                     "tags":null,
                     "notes":null,
                     "biobankCode":"46546643",
                     "date":"2015-11-16",
                     "createdAt":"2016-08-09T12:05:49.166Z",
                     "updatedAt":"2016-08-09T12:05:49.166Z"
                  }
               }
            ]

### Create a New Sample [POST]

You may create a new sample using this method. It takes a JSON
object containing an id (Sample unique identifier, primary key), type (DataType ID),
donor (id Subject, it can be null), biobank (id Biobank),
biobankCode (Biobank unique indentifier, required)
and metadata (can be an empty object, must contain only metadata fields allowed
for the DataType specified in "type")

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
    + Body  
            
            {
                "type": 3,
                "biobank": 1,
                "donor": 1233,
                "parentSample": 3453,
                "metadata": {
                  "city": {
                    "group": "Provenance Info",
                    "value": "MILANO"
                  },
                  "hospital": {
                    "group": "Provenance Info",
                    "value": null
                  },
                  "quantity": {
                    "unit": "ml",
                    "group": "Fluid Info",
                    "value": 0.4
                  },
                  "sample_codification": {
                    "group": "Fluid Info",
                    "value": "PLASMA"
                  },
                  "__DATA": {
                    "bulky data": "here you can put any bulky data you want to store within the database"
                },
                "files": [
                    {
                        "uri": "/home/file1.txt"
                    },
                    {
                        "uri": "/home/file2.dat"
                    }
                ],
                "tags": ["optional tags", "can be null"],
                "notes": "optional textual notes (can be null)",
                "biobankCode": "46546643",
                "date": "2016-08-09T12:05:49.166Z",
              }

+ Response 201 (application/json)

    + Headers
            
            Location: /sample/450
            
    + Body
    
            {
                "id": 450
                "type": 3,
                "biobank": 1,
                "donor": 1233,
                "parentSample": 3453,
                "metadata": {
                  "city": {
                    "group": "Provenance Info",
                    "value": "MILANO"
                  },
                  "hospital": {
                    "group": "Provenance Info",
                    "value": null
                  },
                  "quantity": {
                    "unit": "ml",
                    "group": "Fluid Info",
                    "value": 0.4
                  },
                  "sample_codification": {
                    "group": "Fluid Info",
                    "value": "PLASMA"
                  },
                  "__DATA": {
                    "bulky data": "here you can put any bulky data you want to store within the database"
                },
                "files": [
                    {
                        "uri": "/home/file1.txt"
                    },
                    {
                        "uri": "/home/file2.dat"
                    }
                ],
                "tags": ["optional tags", "can be null"],
                "notes": "optional textual notes (can be null)",
                "biobankCode": "46546643",
                "date": "2016-08-09T12:05:49.166Z",
                "createdAt": "2016-08-09T12:05:49.166Z",
                "updatedAt": "2016-08-09T12:05:49.166Z"
            }


## Sample [/sample/{id}]

### Retrieve an Existing Sample instance [GET]
You may retrieve a single existing sample instance by its id

+ Parameters
    + id (required, number, `34`) ... Sample ID (`id`)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
+ Response 200 (application/json)

            {  
               "type":3,
               "biobank":1,
               "donor":1233,
               "parentSample":3453,
               "metadata":{  
                  "city":{  
                     "group":"Provenance Info",
                     "value":"MILANO"
                  },
                  "hospital":{  
                     "group":"Provenance Info",
                     "value":null
                  },
                  "quantity":{  
                     "unit":"ml",
                     "group":"Fluid Info",
                     "value":0.4
                  },
                  "sample_codification":{  
                     "group":"Fluid Info",
                     "value":"PLASMA"
                  },
                  "__DATA":{  
                     "bulky data":"here you can put any bulky data you want to store within the database"
                  },
                  "tags":null,
                  "notes":null,
                  "id":34,
                  "biobankCode":"46546643",
                  "createdAt":"2016-08-09T12:05:49.166Z",
                  "updatedAt":"2016-08-09T12:05:49.166Z"
               }
            }
                
### Update an Existing Sample instance [PUT]

You may update an existing sample using this method. It takes a JSON
object containing an id (Sample unique identifier, primary key), type (DataType ID),
donor (id Subject, it can be null), biobank (id Biobank), 
biobankCode (Biobank unique indentifier, required)
and metadata (can be an empty object, must contain only metadata fields allowed
for the DataType specified in "type")

+ Parameters
    + id (required, number, `34`) ... Sample ID (`id`)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
    + Body
    
            {
                "type": 3,
                "biobank": 1,
                "donor": 1233,
                "parentSample": 3453,
                "metadata": {
                  "city": {
                    "group": "Provenance Info",
                    "value": "TORINO"
                  },
                  "hospital": {
                    "group": "Provenance Info",
                    "value": null
                  },
                  "quantity": {
                    "unit": "ml",
                    "group": "Fluid Info",
                    "value": 0.7
                  },
                  "sample_codification": {
                    "group": "Fluid Info",
                    "value": "PLASMA"
                  },
                  "__DATA": {
                    "bulky data": "here you can put any bulky data you want to store within the database"
                },
                "files": [
                    {
                        "uri": "/home/user/file1.txt",
                        "details": null,
                        "id": 24,
                        "createdAt": "2015-11-30T22:46:55.487Z",
                        "updatedAt": "2015-11-30T22:46:55.487Z"
                    },
                    {
                        "uri": "/home/user/file2.dat",
                        "details": null,
                        "id": 25,
                        "createdAt": "2015-11-30T22:46:55.487Z",
                        "updatedAt": "2015-11-30T22:46:55.487Z"
                    },
                    {
                        "uri": "/home/user/newFileToAdd.json"
                    }
                ],
                "tags": null,
                "notes": null,
                "id": 34,
                "biobankCode": "46546643",
                "createdAt": "2016-08-09T12:05:49.166Z",
                "updatedAt": "2016-08-09T12:05:49.166Z"
              }

+ Response 200 (application/json)
        

        {
                "type": 3,
                "biobank": 1,
                "donor": 1233,
                "parentSample": 3453,
                "metadata": {
                  "city": {
                    "group": "Provenance Info",
                    "value": "TORINO"
                  },
                  "hospital": {
                    "group": "Provenance Info",
                    "value": null
                  },
                  "quantity": {
                    "unit": "ml",
                    "group": "Fluid Info",
                    "value": 0.7
                  },
                  "sample_codification": {
                    "group": "Fluid Info",
                    "value": "PLASMA"
                  },
                  "__DATA": {
                    "bulky data": "here you can put any bulky data you want to store within the database"
                },
                "files": [
                    {
                        "uri": "/home/user/file1.txt",
                        "details": null,
                        "id": 24,
                        "createdAt": "2015-11-30T22:46:55.487Z",
                        "updatedAt": "2015-11-30T22:46:55.487Z"
                    },
                    {
                        "uri": "/home/user/file2.dat",
                        "details": null,
                        "id": 25,
                        "createdAt": "2015-11-30T22:46:55.487Z",
                        "updatedAt": "2015-11-30T22:46:55.487Z"
                    },
                    {
                        "uri": "/home/user/newFileToAdd.json"
                    }
                ],
                "tags": null,
                "notes": null,
                "id": 34,
                "biobankCode": "46546643",
                "createdAt": "2016-08-09T12:05:49.166Z",
                "updatedAt": "2016-08-09T12:05:49.166Z"
              }

### Delete an Existing Sample instance [DELETE]
 You may delete an existing sample using this method. You must provide an existing ID

+ Parameters
    + id (required, number, `34`) ... Sample ID (`id`)
    
+ Request (application/json)

    + Headers
    
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache

+ Response 200 (application/json)

        {
            "deleted": 1
        }
       

## DataFile [/fileContent]

You may download and upload files associated with Data, stored within FileSystem

### Upload a file to the repository - local server storage [POST]

You may upload a single File instance using this method

+ Request (multipart/form-data; boundary=----BOUNDARY)

    + Headers
            
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Accept: application/json
            Cache-Control: no-cache
            
    + Body
            
            ----BOUNDARY
            Content-Disposition: form-data; name="uploadFile"; filename="test-file.txt"
            Content-Type: text/plain
            File Content is here.
            ----BOUNDARY

+ Response 200 (application/json)

    + Headers
            
            Connection: keep-alive
            Date: Wed, 02 Dec 2015 13:36:29 GMT
            Vary: X-HTTP-Method-Override
            X-Powered-By: Sails <sailsjs.org>
    
    + Body
    
            {
                "name": {
                    "fd": "/var/xtens/dataFiles/landing/uploaded-file",
                    "size": 25,
                    "type": "text/plain",
                    "filename": "test-file.txt",
                    "status": "finished",
                    "field": "uploadFile"
                }
            }

### Download a file from the repository - local server storage [GET]

You may download a single File instance by its id

+ Request

    + Headers
            
            Authorization: Bearer LI32Dnfd6urfhe7adab3ub22h33j3-3khrb67j3.3jhfdsj8zjvbbn33n4n2.33hvbdve2jhj2-asdkajdb3
            Cache-Control: no-cache
    
    + Body
            
            {
                "id":1
            }

+ Response 200

    + Headers
    
            content-disposition: attachment;filename=file.test.txt,
            'transfer-encoding': 'chunked'