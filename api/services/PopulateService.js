/**
 * @module
 * @author Massimiliano Izzo
 * @author Valentina Tedone
 */    
var MAX = sails.config.xtens.constants.TEST_MAX;
var MIN = sails.config.xtens.constants.TEST_MIN;
var FieldTypes = sails.config.xtens.constants.FieldTypes;

function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}

var PopulateService = {

    /**
     * @name generateData
     * @param {DataType} dataType - a DataType model
     * @return {Data} data - a new Data instance
     */
    generateData: function(dataType) {

        var data = {type:dataType.id,date:new Date(),notes:"generated by PopulateService.generateData"};

        // skipping the loop fields getRandomArbitrary(min, max
        var fields = DataTypeService.getFlattenedFields(dataType,true);
        var metadata = {};
        fields.forEach(function(field){

            switch(field.fieldType){
                case FieldTypes.TEXT:
                    metadata[field.name] = PopulateService.generateTextField(field);
                break;
                case FieldTypes.FLOAT:
                    metadata[field.name] = PopulateService.generateFloatField(field);
                break;

            }

        });
        data.metadata = metadata;
        return data;
    },

    generateFloatField: function(field) {

        var min = field.min || MIN;
        var max = field.max || MAX;

        var res = {
            "value": parseFloat(getRandomArbitrary(min, max).toFixed(3)),
            "unit": (field.hasUnit) ? field.possibleUnits[0] : undefined
        };
        console.log("float field is:" + res);
        return res;

    },

    generateTextField: function(field) {

    }

};
module.exports = PopulateService;
